POSIX terminal interface
    comprising both an Application Programming Interface for programs, 
    and a set of behavioural expectations for users of a terminal,
--------------------------------------------------------------------------------------------
Hardware

    A multiplicity of I/O devices are regarded as "terminals" in Unix systems.
    These include:

        serial devices 
            connected by a serial port such as 
                printers/teleprinters, teletypewriters, modems supporting remote terminals 
                via dial-up access,and directly-connected local terminals
        
        display adapter and keyboard hardware directly incorporated into the system unit, 

        software terminal emulators, 
            such as 
                the xterm, 
                Konsole, 
                GNOME Terminal, and 
                Terminal programs, and 
                network servers such as 
                    the rlogin daemon and the SSH daemon, 
                    which make use of pseudoterminals

--------------------------------------------------------------------------------------------
Terminal intelligence and capabilities
--------------------------------------------------------------------------------------------
Intelligence: 
            terminals are dumb, not intelligent
            A terminal is a character-oriented device, 
            comprising streams of characters received from and sent to the device.
            the streams of characters are structured, 

            incorporating 
                control characters or non-printing character (NPC)
                    is a code point (a number) in a character set, 
                    that does not represent a written symbol.
                        In ASCII
                        The control characters in ASCII still in common use include:

                            0   "end of a string"       (null, NUL, \0, ^@), 
                                                            originally intended to be an ignored character, 
                            7                           (bell, BEL, \a, ^G), 
                                                            which may cause the device to emit a warning such as 
                                                                a bell or beep sound or the screen flashing.
                            8                           (backspace, BS, \b, ^H), 
                                                            may overprint the previous character.
                            9                           (horizontal tab, HT, \t, ^I), 
                                                            moves the printing position right to the next tab stop.
                            10  "new line"              (line feed, LF, \n, ^J), 
                                                            moves the print head down one line, 
                                                            or to the left edge and down. 
                            11                          (vertical tab, VT, \v, ^K), 
                                                            vertical tabulation.
                            12                          (form feed, FF, \f, ^L), 
                                                            to cause a printer to eject paper to the top of the next page, 
                                                            or a video terminal to clear the screen.
                            13                          (carriage return, CR, \r, ^M), 
                                                            moves the printing position to the start of the line, 
                                                            allowing overprinting. 
                            26  "EOF"                   (Control-Z, SUB, EOF, ^Z). 
                                                            Acts as an end-of-file for the Windows text-mode file i/o.
                            27                          (escape, ESC, \e (GCC only), ^[). 
                                                            Introduces an escape sequence.
                escape codes, 
                    a prefix sequences of characters that,have a special meaning,possibly to control peripheral devices.
                    like '\n' in c means new line  
                special characters, 
--------------------------------------------------------------------------------------------
Terminal intelligence and capabilities
--------------------------------------------------------------------------------------------
terminal Capabilities: 
            terminfo, termcap, curses, et al.

    The "capabilities" "terminal features"  
        -The escape codes sent to the terminal perform various functions 
                such as moving the terminal's cursor to positions on the screen, 
        -clearing and scrolling all or parts of the screen, 
        -turning on and off attached printer devices, 
        -programmable function keys, 
        -changing display colours and attributes (such as reverse video), 
        -and setting display title strings. 
    
    The escape codes received from the terminal signify things such as 
            function key, 
            arrow key, 
            and other special keystrokes 
                (home key, end key, help key, PgUp key, PgDn key, insert key, delete key, and so forth).

    These capabilities 

        Application programs 
            use the terminal capabilities to provide textual user interfaces with windows, dialogue boxes, buttons, labels, input fields, menus, and so forth.
 
TERM environment variable
    The software terminal emulator, using a pseudoterminal, 
    sets the TERM environment variable to specify the type of terminal that it is emulating. 

job control (Unix)
    Terminals provide job control facilities. 
    Interactively, the user at the terminal can send control characters that suspend the currently running job, 
    reverting to the interactive job control shell that spawned the job, 
    and can run commands that place jobs in the "background" or that switch another, 
    background, job into the foreground (unsuspending it if necessary).

Line disciplines
    Strictly speaking, in Unices a terminal device comprises the underlying tty device driver, 
    responsible for the physical control of the device hardware via I/O instructions and handling device interrupt requests for character input and output, 
    and the line discipline. 
    A line discipline is independent of the actual device hardware, 
    and the same line discipline can be used for a terminal concentrator device responsible for multiple controlling terminals as for a pseudoterminal. 
    In fact, the line discipline (or, in the case of BSD, AIX, and other systems, line disciplines) are the same across all terminal devices. 
    It is the line discipline that is responsible for 
        local echo, 
        line editing, 
        processing of input modes, 
        processing of output modes, 
        and character mapping. 
    All these things are independent of the actual hardware, 
    dealing as they do in the simple abstractions provided by tty device drivers: 
        transmit a character, 
        receive a character, 
        set various hardware states.

In Seventh Edition Unix, 
    BSD systems and derivatives including macOS, and Linux, 
    each terminal device can be switched amongst multiple line disciplines.


History
The POSIX terminal interface is derived from the terminal interfaces of various Unix systems.

largely geared towards teletypewriters as terminals. Input was entered a line at a time, 
with the terminal driver in the operating system (and not the terminals themselves) providing simple line editing capabilities. 
A buffer was maintained by the kernel in which editing took place. 

Applications reading terminal input would receive the contents of the buffer only when the return key was pressed on the terminal to end line editing. 
    The @ key sent from the terminal to the system would erase ("kill") the entire current contents of the editing buffer, 
        and would be normally displayed as an '@' symbol followed by a newline sequence to move the print position to a fresh blank line. 
    The # key sent from the terminal to the system would erase the last character from the end of the editing buffer, 
        and would be normally displayed as an '#' symbol, 
    which users would have to recognize as denoting a "rubout" of the preceding character 
    (teletypewriters not being physically capable of erasing characters once they have been printed on the paper).
---------------------------------------------------------------------------------------------------------------------------------------------------
From a programming point of view, 
---------------------------------------------------------------------------------------------------------------------------------------------------
    a terminal device had transmit and receive baud rates, 
        --"erase" and "kill" characters (that performed line editing, as explained), 'The @ key' The # key
        --"interrupt" and "quit" characters (generating signals to all of the processes for which the terminal was a controlling terminal), 
        --"start" and "stop" characters (used for modem flow control), 
        --"end of file" character 
            (acting like a carriage return except discarded from the buffer by the read() system call and therefore potentially causing a zero-length result to be returned) 
            and various basic mode flags determining whether local echo was emulated by the kernel's terminal driver, 
            whether modem flow control was enabled, 
            the lengths of various output delays, 
            mapping for the carriage return character, 
            and the three input modes.
---------------------------------------------------------------------------------------------------------------------------------------------------
The three input modes were:
---------------------------------------------------------------------------------------------------------------------------------------------------
        1- line mode (also called "cooked" mode)
            In line mode the line discipline performs all line editing functions and recognizes the 
                "interrupt" and "quit" control characters and transforms them into signals sent to processes. 
            
            Applications programs reading from the terminal receive entire lines, 
                after line editing has been completed by the user pressing return.

        2- cbreak mode
            cbreak mode is one of two character-at-a-time modes. 
            as a "half-cooked" and therefore "rare" mode.
            The line discipline performs no line editing, 
            and the control sequences for line editing functions are treated as normal character input. 
            
            Applications programs reading from the terminal receive characters immediately, 
                as soon as they are available in the input queue to be read. 
                However, 
                    the "interrupt" and "quit" control characters, 
                    as well as modem flow control characters, 
                    are still handled specially and stripped from the input stream.

    3- raw mode "canonical mode with signal generation disabled"
        raw mode is the other of the two character-at-a-time modes. 
        The line discipline performs no line editing, 
            and the control sequences for both line editing functions and the various special characters 
            ("interrupt", "quit", and flow control) are treated as normal character input. 
        
        Applications programs reading from the terminal receive characters immediately, 
            and receive the entire character stream unaltered, 
            just as it came from the terminal device itself.
        
        The programmatic interface for querying and modifying all of these modes and control characters was the ioctl() system call. 
        (This replaced the stty() and gtty() system calls of Sixth Edition Unix.
        
        Although the "erase" and "kill" characters were modifiable from their defaults of # and @, 
            for many years they were the pre-set defaults in the terminal device drivers, 

BSD: the advent of job control
These extensions comprised additional (again programmatically modifiable) special characters:

        The "suspend" and "delayed suspend" characters 
            (by default Control+Z and Control+Y — ASCII SUB and EM) 
            caused the generation of a new SIGTSTP signal to processes in the terminal's controlling process group.
        The "word erase", "literal next", and "reprint" characters 
            (by default Control+W, Control+V, and Control+R — ASCII ETB, SYN, and DC2) 
            performed additional line editing functions. 
            "word erase" erased the last word at the end of the line editing buffer. 
            "literal next" allowed any special character to be entered into the line editing buffer (a function available, somewhat inconveniently, 
            in Seventh Edition Unix via the backslash character). 
            "reprint" caused the line discipline to reprint the current contents of the line editing buffer on a new line 
            (useful for when another, background, process had generated output that had intermingled with line editing).
    
    The programmatic interface for querying and modifying all of these extra modes and control characters was still the ioctl() system call, 
    which its creators described as a "rather cluttered interface". 
    All of the original Seventh Edition Unix functionality was retained, 
    and the new functionality was added via additional ioctl() operation codes, 
    resulting in a programmatic interface that had clearly grown, 
    and that presented some duplication of functionality.

----------------------------------------------------------------------------------------------------------------------------------------------------
POSIX: Consolidation and abstraction
----------------------------------------------------------------------------------------------------------------------------------------------------
    One of the major problems that the POSIX standard addressed with its definition of a general terminal interface was the plethora of programmatic interfaces. 
    Although by the time of the standard the behaviour of terminals was fairly uniform from system to system, 
    most Unices having adopted the notions of line disciplines and the BSD job control capabilities, 
    the programmatic interface to terminals via the ioctl() system call was a mess. 
    Different Unices supplied different ioctl() operations, 
        with different (symbolic) names, and different flags. 
        Portable source code had to contain a significant amount of conditional compilation to accommodate the differences across software platforms, 
        even though they were all notionally Unix.

The POSIX standard replaces the ioctl() system entirely, 
    with a set of library functions 
    (which, of course, may be implemented under the covers via platform-specific ioctl() operations) 
    with standardized names and parameters. 
    

POSIX also introduced support for job control, 
with the termios structure containing suspend and delayed-suspend characters in addition to the control characters supported by System III and System V. 
It did not add any of the cooked-mode extensions from BSD.



Each process also is a member of a process group. 
Each terminal device records a process group that is termed its foreground process group. 

The process groups control terminal access and signal delivery. 
Signals generated at the terminal are sent to all processes that are members 
of the terminal's foreground process group. 
read() and write() I/O operations on a terminal by a process that is not a member 
of the terminal's foreground process group will and may optionally (respectively) 
cause signals (SIGTTIN and SIGTTOU respectively) to be sent to the invoking process.

Various terminal-mode-altering library functions have the same behaviour as write(), 
except that they always generate the signals, 

even if that functionality is turned off for write() itself.

The termios data structure
The data structure used by all of the terminal library calls is the termios structure,
    whose C and C++ programming language definition is as follows:
        struct termios {
            tcflag_t c_iflag ;  /* Input modes ''TERMINAL C flags
                                    input mode flags for controlling input parity, 
                                    input newline translation, 
                                    modem flow control, 
                                    8-bit cleanliness, 
                                    and response to a (serial port's) "break" condition

                                */
            tcflag_t c_oflag ;  /* Output modes ''TERMINAL C flags
                                    output mode flags for controlling implementation-defined 
                                    output postprocessing, 
                                    output newline translation, 
                                    and output delays after various control characters have been sent

                                */
            tcflag_t c_cflag ;  /* Control modes
                                    terminal hardware control flags for controlling the actual terminal device 
                                    rather than the line discipline: 
                                        the number of bits in a character, 
                                        parity type, 
                                        hangup control, 
                                        and serial line flow control

                                */
            tcflag_t c_lflag ;  // 
                                /* Local modes
                                    local control flags for controlling the line discipline 
                                    rather than the terminal hardware: 
                                        canonical mode, 
                                        echo modes, 
                                        signal-generation character recognition 
                                        and handling, 
                                        and enabling the generation of the SIGTTOU signal 
                                            by the write() system call

                                */

            cc_t c_cc[NCCS] ;   // Control characters
        } ;



Indeed, implementations have to add non-standard fields for recording 
input and output baud rates. These are recorded in the structure, 
in an implementation-defined form, and accessed via accessor functions, 
rather than by direct manipulation of the field values, 
as is the case for the standardized structure fields.
--------------------------------------------------------------------------------------------------
defined in a standard header termios.h. 
    The data type aliases 
        tcflag_t and cc_t, 
    as well as the symbolic constant    
        NCCS and 
    a whole load of symbolic constants for the various mode flags, 
    control character names, and baud rates, 
--------------------------------------------------------------------------------------------------
library functions are 
    tcgetattr()
        query a terminal device's current attribute settings into a termios structure
    tcsetattr()
        set a terminal device's current attribute settings from a termios structure, 
        optionally waiting for queued output to drain and flushing queued input
    cfgetispeed()
        query the input baud rate from the implementation-defined fields 
        in a termios structure
    cfgetospeed()
        query the output baud rate from the implementation-defined fields 
        in a termios structure
    cfsetispeed()
        set the input baud rate in the implementation-defined fields 
        in a termios structure
    cfsetospeed()
        set the output baud rate in the implementation-defined fields 
        in a termios structure
    tcsendbreak()
        send a modem "break" signal on a serial device terminal
    tcdrain()
        wait for queued output to drain
    tcflush()
        discard queued input
    tcflow()
        change flow control
    tcgetpgrp()
        query the terminal's foreground process group
    tcsetpgrp()
        set the terminal's foreground process group
--------------------------------------------------------------------------------------------------
Special characters
    The c_cc[]          
        array member of the termios data structure specifies all of the 
        (programmatically modifiable) special characters. 
        The indexes into the array are symbolic constants, 
        one for each special character type, as in the table at right. 
        (Two further entries in the array are relevant to 
        non-canonical mode input processing and are discussed below.)

    Field	            meaning	Retrieved by read()	Notes
    c_cc[VEOF]	        end of file	No	
                            Only processed by canonical mode line editing
    c_cc[VEOL]	        end of line	Yes	
                            Only processed by canonical mode line editing
    c_cc[VERASE]	    "erase"	No	
                            Only processed by canonical mode line editing
    c_cc[VKILL]	        "kill"	No	
                            Only processed by canonical mode line editing
    c_cc[VINTR]	        "interrupt"	No	
                            Signal-generation character independent of input mode
    c_cc[VQUIT]	        "quit"	No	
                            Signal-generation character independent of input mode
    c_cc[VSUSP]	        "suspend"	No	
                            Signal-generation character independent of input mode
    c_cc[VSTOP]	        "stop"	No	
                            Modem flow control character independent of input mode
    c_cc[VSTART]	    "start"	No	
                            Modem flow control character independent of input mode

    c_cc[TIME] and 
    c_cc[MIN]           are both zero
                            In this case, 
                                the data in the buffer are "available for reading" immediately, 
                                    and read() returns immediately with whatever data are in the buffer 
                                        (potentially returning zero if there are zero data available).
    c_cc[TIME]  is      non-zero and 
    c_cc[MIN]   is      zero
                            In this case, 
                                the data in the buffer are "available for reading" after the specified timeout has elapsed, 
                                    the timer being triggered by the start of the read() system call, 
                                    or if a single character is received. 
                                    In other words, 
                                        read() waits for a maximum specified total time,    
                                        and may return zero data, 
                                        and returns any data as soon as they are received.
    c_cc[TIME]  is zero and 
    c_cc[MIN]   is non-zero
                            In this case, 
                                the data in the buffer are "available for reading" after the specified number of characters have been received in the buffer. 
                                In other words, 
                                    read() waits for a minimum amount of data 
                                    (which may be larger than what the caller is prepared to read in the system call), 
                                    will not return zero data, 
                                    and may wait indefinitely.
    c_cc[TIME]  
    c_cc[MIN]   are     both non-zero
                            In this case, 
                                the data in the buffer are "available for reading" after the specified number of characters have been received in the buffer 
                                or the timeout has expired since the last character was entered. 
                                There is no timeout for the very first character. 
                                
                                In other words, 
                                    read() waits for a minimum amount of data 
                                    (which may be larger than what the caller is prepared to read in the system call), 
                                    will not return zero data, may wait indefinitely, 
                                    but won't wait longer than the specified timeout if at least one character is in the buffer to be read.
------------------------------------------------------------------------------------------------------
Input processing

    Input processing determines the behaviour of the read() 
    system call on a terminal device and the line editing 
    and signal-generation characteristics of the line discipline. 
    Unlike the case of Seventh Edition Unix and BSD version 4, 
    and like the case of System III and System V, 
    line editing operates in one of just two modes: 
    canonical mode and non-canonical mode. 
    The basic difference between them is when, 
    from the point of view of the blocking/non-blocking requirements of the 
    read() system call 
    (specified with the O_NONBLOCK flag on the file descriptor 
    via open() or fcntl()), data "are available for reading".

Canonical mode processing
    In canonical mode, 
        data are accumulated in a line editing buffer, 
        and do not become "available for reading" 
        until line editing has been terminated by the user 
        (at the terminal) 
        sending a line delimiter character. 
        Line delimiter characters are special characters, 
        and they are end of file, 
        end of line, 
        and linefeed (ASCII LF). 
        The former two are settable programmatically, 
        whilst the latter is fixed. 
        The latter two are included in the line editing buffer, 
        whilst the former one is not.

More strictly, 
zero or more lines are accumulated in the line editing buffer, 
separated by line delimiters 
(which may or may not be discarded once read() comes around to reading them), 
and line editing operates upon the part of the line editing buffer that follows the last (if any) line delimiter in the buffer. 
So, for example, 
the "erase" character (whatever that has been programmed to be) will erase the last character in the line buffer only up to (but not including) a preceding line delimiter.

Non-canonical mode processing
    In non-canonical mode, 
        data are accumulated in a buffer 
        (which may or may not be the line editing buffer 
        — some implementations having separate "processed input" 
        and "raw input" queues) 
        and become "available for reading" according to the values of two input control parameters, 
        the c_cc[MIN] and c_cc[TIME] members of the termios data structure. 
        Both are unsigned quantities 
        (because cc_t is required to be an alias for an unsigned type). 
        The former specifies a minimum number of characters, 
        and the latter specifies a timeout in tenths of a second.
        


Output processing
    Output mode control flags determine various options:

Carriage returns may be inserted before each linefeed character, to translate Unix newline semantics to the ASCII semantics that many terminals expect.[27][22]
